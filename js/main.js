!function t(i,e,s){function o(a,h){if(!e[a]){if(!i[a]){var r="function"==typeof require&&require;if(!h&&r)return r(a,!0);if(n)return n(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var _=e[a]={exports:{}};i[a][0].call(_.exports,function(t){var e=i[a][1][t];return o(e||t)},_,_.exports,t,i,e,s)}return e[a].exports}for(var n="function"==typeof require&&require,a=0;a<s.length;a++)o(s[a]);return o}({1:[function(t,i,e){!function(t){var s=!1;if("function"==typeof define&&define.amd&&(define(t),s=!0),"object"==typeof e&&(i.exports=t(),s=!0),!s){var o=window.Cookies,n=window.Cookies=t();n.noConflict=function(){return window.Cookies=o,n}}}(function(){function t(){for(var t=0,i={};t<arguments.length;t++){var e=arguments[t];for(var s in e)i[s]=e[s]}return i}function i(e){function s(i,o,n){var a;if("undefined"!=typeof document){if(arguments.length>1){if("number"==typeof(n=t({path:"/"},s.defaults,n)).expires){var h=new Date;h.setMilliseconds(h.getMilliseconds()+864e5*n.expires),n.expires=h}n.expires=n.expires?n.expires.toUTCString():"";try{a=JSON.stringify(o),/^[\{\[]/.test(a)&&(o=a)}catch(t){}o=e.write?e.write(o,i):encodeURIComponent(String(o)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),i=(i=(i=encodeURIComponent(String(i))).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent)).replace(/[\(\)]/g,escape);var r="";for(var c in n)n[c]&&(r+="; "+c,!0!==n[c]&&(r+="="+n[c]));return document.cookie=i+"="+o+r}i||(a={});for(var _=document.cookie?document.cookie.split("; "):[],l=/(%[0-9A-Z]{2})+/g,d=0;d<_.length;d++){var p=_[d].split("="),u=p.slice(1).join("=");'"'===u.charAt(0)&&(u=u.slice(1,-1));try{var f=p[0].replace(l,decodeURIComponent);if(u=e.read?e.read(u,f):e(u,f)||u.replace(l,decodeURIComponent),this.json)try{u=JSON.parse(u)}catch(t){}if(i===f){a=u;break}i||(a[f]=u)}catch(t){}}return a}}return s.set=s,s.get=function(t){return s.call(s,t)},s.getJSON=function(){return s.apply({json:!0},[].slice.call(arguments))},s.defaults={},s.remove=function(i,e){s(i,"",t(e,{expires:-1}))},s.withConverter=i,s}return i(function(){})})},{}],2:[function(t,i,e){function s(t,i,e,n,a,h){this._font=t,this._text=i,this._x=o.default(n,0),this._y=o.default(a,0),this._fontSize=o.default(e,12),this._p=o.default(h,window),this._rotation=0,this._hAlign=s.ALIGN.BOX_CENTER,this._vAlign=s.BASELINE.BOX_CENTER,this._calculateMetrics(!0)}var o=t("./utils.js");i.exports=s,s.ALIGN={BOX_LEFT:"box_left",BOX_CENTER:"box_center",BOX_RIGHT:"box_right"},s.BASELINE={BOX_TOP:"box_top",BOX_CENTER:"box_center",BOX_BOTTOM:"box_bottom",FONT_CENTER:"font_center",ALPHABETIC:"alphabetic"},s.prototype.setText=function(t){return this._text=t,this._calculateMetrics(!1),this},s.prototype.setPosition=function(t,i){return this._x=o.default(t,this._x),this._y=o.default(i,this._y),this},s.prototype.getPosition=function(){return{x:this._x,y:this._y}},s.prototype.setTextSize=function(t){return this._fontSize=t,this._calculateMetrics(!0),this},s.prototype.setRotation=function(t){return this._rotation=o.default(t,this._rotation),this},s.prototype.getRotation=function(t){return this._rotation},s.prototype.setPInstance=function(t){return this._p=o.default(t,this._p),this},s.prototype.getPInstance=function(){return this._p},s.prototype.setAnchor=function(t,i,e){var n=this._calculateAlignedCoords(this._x,this._y);if(this._hAlign=o.default(t,s.ALIGN.CENTER),this._vAlign=o.default(i,s.BASELINE.CENTER),e){var a=this._calculateAlignedCoords(this._x,this._y);this._x+=n.x-a.x,this._y+=n.y-a.y}return this},s.prototype.getBbox=function(t,i){this.setPosition(t,i);var e=this._calculateAlignedCoords(this._x,this._y);return{x:e.x+this._boundsOffset.x,y:e.y+this._boundsOffset.y,w:this.width,h:this.height}},s.prototype.getTextPoints=function(t,i,e){this.setPosition(t,i);for(var s=this._font.textToPoints(this._text,this._x,this._y,this._fontSize,e),o=0;o<s.length;o+=1){var n=this._calculateAlignedCoords(s[o].x,s[o].y);s[o].x=n.x,s[o].y=n.y}return s},s.prototype.draw=function(t,i,e){e=o.default(e,!1),this.setPosition(t,i);var s={x:this._x,y:this._y};if(this._p.push(),this._rotation&&(s=this._calculateRotatedCoords(s.x,s.y,this._rotation),this._p.rotate(this._rotation)),s=this._calculateAlignedCoords(s.x,s.y),this._p.textAlign(this._p.LEFT,this._p.BASELINE),this._p.textFont(this._font),this._p.textSize(this._fontSize),this._p.text(this._text,s.x,s.y),e){this._p.stroke(200);var n=s.x+this._boundsOffset.x,a=s.y+this._boundsOffset.y;this._p.noFill(),this._p.rect(n,a,this.width,this.height)}this._p.pop()},s.prototype._calculateRotatedCoords=function(t,i,e){return{x:Math.cos(e)*t+Math.cos(Math.PI/2-e)*i,y:-Math.sin(e)*t+Math.sin(Math.PI/2-e)*i}},s.prototype._calculateAlignedCoords=function(t,i){var e,o;switch(this._hAlign){case s.ALIGN.BOX_LEFT:e=t;break;case s.ALIGN.BOX_CENTER:e=t-this.halfWidth;break;case s.ALIGN.BOX_RIGHT:e=t-this.width;break;default:e=t,console.log("Unrecognized horizonal align:",this._hAlign)}switch(this._vAlign){case s.BASELINE.BOX_TOP:o=i-this._boundsOffset.y;break;case s.BASELINE.BOX_CENTER:o=i+this._distBaseToMid;break;case s.BASELINE.BOX_BOTTOM:o=i-this._distBaseToBottom;break;case s.BASELINE.FONT_CENTER:o=i-this._descent+(this._ascent+this._descent)/2;break;case s.BASELINE.ALPHABETIC:o=i;break;default:o=i,console.log("Unrecognized vertical align:",this._vAlign)}return{x:e,y:o}},s.prototype._calculateMetrics=function(t){var i=this._font.textBounds(this._text,1e3,1e3,this._fontSize);i={x:i.x-1e3,y:i.y-1e3,w:i.w,h:i.h},t&&(this._ascent=this._font._textAscent(this._fontSize),this._descent=this._font._textDescent(this._fontSize)),this.width=i.w,this.height=i.h,this.halfWidth=this.width/2,this.halfHeight=this.height/2,this._boundsOffset={x:i.x,y:i.y},this._distBaseToMid=Math.abs(i.y)-this.halfHeight,this._distBaseToBottom=this.height-Math.abs(i.y)}},{"./utils.js":3}],3:[function(t,i,e){e.default=function(t,i){return void 0!==t?t:i}},{}],4:[function(t,i,e){function s(t,i){this._slideshowDelay=void 0!==t?t:2e3,this._transitionDuration=void 0!==i?i:1e3,this._slideshows=[],this.reload()}function o(t,i,e){this._$container=t,this._slideshowDelay=i,this._transitionDuration=e,this._timeoutId=null,this._imageIndex=0,this._$images=[],this._$container.find("img").each(function(t,i){var e=$(i);e.css({position:"absolute",top:"0",left:"0",zIndex:0===t?2:0}),this._$images.push(e)}.bind(this)),this._numImages=this._$images.length,this._numImages<=1||(this._$container.on("mouseenter",this._onEnter.bind(this)),this._$container.on("mouseleave",this._onLeave.bind(this)))}i.exports=s;var n=t("./utilities.js");s.prototype.reload=function(){var t=this._slideshows||[];this._slideshows=[],$(".hover-slideshow").each(function(i,e){var s=$(e),n=this._findInSlideshows(e,t);if(-1!==n){var a=t.splice(n,1)[0];this._slideshows.push(a)}else this._slideshows.push(new o(s,this._slideshowDelay,this._transitionDuration))}.bind(this))},s.prototype._findInSlideshows=function(t,i){for(var e=0;e<i.length;e+=1)if(t===i[e].getElement())return e;return-1},o.prototype.getElement=function(){return this._$container.get(0)},o.prototype.get$Element=function(){return this._$container},o.prototype._onEnter=function(){this._timeoutId=setTimeout(this._advanceSlideshow.bind(this),500)},o.prototype._onLeave=function(){clearInterval(this._timeoutId),this._timeoutId=null},o.prototype._advanceSlideshow=function(){this._imageIndex+=1;var t;this._numImages>=3&&(t=n.wrapIndex(this._imageIndex-2,this._numImages),this._$images[t].css({zIndex:0,opacity:0}),this._$images[t].velocity("stop")),this._numImages>=2&&(t=n.wrapIndex(this._imageIndex-1,this._numImages),this._$images[t].css({zIndex:1,opacity:1}),this._$images[t].velocity("stop")),this._imageIndex=n.wrapIndex(this._imageIndex,this._numImages),this._$images[this._imageIndex].css({zIndex:2,opacity:0}),this._$images[this._imageIndex].velocity({opacity:1},this._transitionDuration,"easeInOutQuad"),this._timeoutId=setTimeout(this._advanceSlideshow.bind(this),this._slideshowDelay)}},{"./utilities.js":19}],5:[function(t,i,e){function s(t,i,e){this._$nav=t,this._$navLogo=i,this._fontPath=e,this._text=this._$navLogo.text(),this._isFirstFrame=!0,this._isMouseOver=!1,this._isOverNavLogo=!1,this._updateTextOffset(),this._updateSize(),this._updateFontSize(),this._$container=$("<div>").css({position:"absolute",top:"0px",left:"0px"}).prependTo(this._$nav).hide(),this._createP5Instance()}i.exports=s;var o=t("../utilities.js");s.prototype._createP5Instance=function(){new p5(function(t){this._p=t,t.preload=this._preload.bind(this,t),t.setup=this._setup.bind(this,t),t.draw=this._draw.bind(this,t)}.bind(this),this._$container.get(0))},s.prototype._updateTextOffset=function(){var t=$("<div>").css({display:"inline-block",verticalAlign:"baseline"}).prependTo(this._$navLogo),i=this._$nav.offset(),e=t.offset();this._textOffset={top:e.top-i.top,left:e.left-i.left},t.remove()},s.prototype._calculateNavLogoBounds=function(){var t=this._$nav.offset(),i=this._$navLogo.offset();this._logoBbox={y:i.top-t.top,x:i.left-t.left,w:this._$navLogo.outerWidth(),h:this._$navLogo.outerHeight()}},s.prototype._updateSize=function(){this._width=this._$nav.innerWidth(),this._height=this._$nav.innerHeight()},s.prototype._updateFontSize=function(){this._fontSize=this._$navLogo.css("fontSize").replace("px","")},s.prototype._onResize=function(t){this._updateSize(),this._updateFontSize(),this._updateTextOffset(),this._calculateNavLogoBounds(),t.resizeCanvas(this._width,this._height)},s.prototype._setMouseOver=function(t){this._isMouseOver=t},s.prototype._onClick=function(t){this._isOverNavLogo&&this._$navLogo.trigger(t)},s.prototype._preload=function(t){this._font=t.loadFont(this._fontPath)},s.prototype._setup=function(t){var i=t.createCanvas(this._width,this._height);this._$canvas=$(i.canvas),this._$container.show(),this._$navLogo.css("zIndex",-1),this._$canvas.on("mouseover",this._setMouseOver.bind(this,!0)),this._$canvas.on("mouseout",this._setMouseOver.bind(this,!1)),this._$canvas.on("click",this._onClick.bind(this)),$(window).on("resize",this._onResize.bind(this,t))},s.prototype._draw=function(t){if(this._isMouseOver){var i=o.isInRect(t.mouseX,t.mouseY,this._logoBbox);!this._isOverNavLogo&&i?(this._isOverNavLogo=!0,this._$canvas.css("cursor","pointer")):this._isOverNavLogo&&!i&&(this._isOverNavLogo=!1,this._$canvas.css("cursor","initial"))}}},{"../utilities.js":19}],6:[function(t,i,e){function s(t,i){n.call(this,t,i,"../fonts/big_john-webfont.ttf")}i.exports=s;var o=t("p5-bbox-aligned-text"),n=t("./base-logo-sketch.js"),a=t("./generators/sin-generator.js"),h=t("../utilities.js");s.prototype=Object.create(n.prototype),s.prototype._onResize=function(t){n.prototype._onResize.call(this,t),this._spacing=h.map(this._fontSize,20,40,2,5,{clamp:!0,round:!0}),this._bboxText.setText(this._text).setTextSize(this._fontSize).setAnchor(o.ALIGN.BOX_LEFT,o.BASELINE.ALPHABETIC).setPosition(this._textOffset.left,this._textOffset.top).setAnchor(o.ALIGN.BOX_CENTER,o.BASELINE.BOX_CENTER,!0),this._drawStationaryLogo(t),this._points=this._bboxText.getTextPoints(),this._isFirstFrame=!0},s.prototype._drawStationaryLogo=function(t){t.background(255),t.stroke(255),t.fill("#0A000A"),t.strokeWeight(2),this._bboxText.draw()},s.prototype._setup=function(t){n.prototype._setup.call(this,t),this._bboxText=new o(this._font,this._text,this._fontSize,0,0,t),this._onResize(t),this._drawStationaryLogo(t),this._thresholdGenerator=new a(t,0,1,.02,t.PI/2)},s.prototype._draw=function(t){if(n.prototype._draw.call(this,t),this._isMouseOver&&this._isOverNavLogo){this._isFirstFrame&&(t.background(255),this._isFirstFrame=!1),this._fontSize>30?this._thresholdGenerator.setBounds(.2*this._bboxText.height,.47*this._bboxText.height):this._thresholdGenerator.setBounds(.2*this._bboxText.height,.6*this._bboxText.height);var i=this._thresholdGenerator.generate();t.background(255,100),t.strokeWeight(1);for(var e=0;e<this._points.length;e+=1)for(var s=this._points[e],o=e+1;o<this._points.length;o+=1){var a=this._points[o],h=t.dist(s.x,s.y,a.x,a.y);h<i&&(t.noStroke(),t.fill("rgba(165, 0, 173, 0.25)"),t.ellipse((s.x+a.x)/2,(s.y+a.y)/2,h,h),t.stroke("rgba(165, 0, 173, 0.25)"),t.noFill(),t.line(s.x,s.y,a.x,a.y))}}}},{"../utilities.js":19,"./base-logo-sketch.js":5,"./generators/sin-generator.js":8,"p5-bbox-aligned-text":2}],7:[function(t,i,e){function s(t,i,e,s,o){this._p=t,this._min=n.default(i,0),this._max=n.default(e,1),this._increment=n.default(s,.1),this._position=n.default(o,t.random(-1e6,1e6))}function o(t,i,e,o,n,a,h,r,c){this._xNoise=new s(t,i,e,a,r),this._yNoise=new s(t,o,n,h,c),this._p=t}i.exports={NoiseGenerator1D:s,NoiseGenerator2D:o};var n=t("../../utilities.js");s.prototype.setBounds=function(t,i){this._min=n.default(t,this._min),this._max=n.default(i,this._max)},s.prototype.setIncrement=function(t){this._increment=n.default(t,this._increment)},s.prototype.generate=function(){this._update();var t=this._p.noise(this._position);return t=this._p.map(t,0,1,this._min,this._max)},s.prototype._update=function(){this._position+=this._increment},o.prototype.setBounds=function(t){t&&(this._xNoise.setBounds(t.xMin,t.xMax),this._yNoise.setBounds(t.yMin,t.yMax))},o.prototype.setBounds=function(t){t&&(this._xNoise.setBounds(t.xIncrement),this._yNoise.setBounds(t.yIncrement))},o.prototype.generate=function(){return{x:this._xNoise.generate(),y:this._yNoise.generate()}}},{"../../utilities.js":19}],8:[function(t,i,e){function s(t,i,e,s,n){this._p=t,this._min=o.default(i,0),this._max=o.default(e,0),this._increment=o.default(s,.1),this._angle=o.default(n,t.random(-1e6,1e6))}i.exports=s;var o=t("../../utilities.js");s.prototype.setBounds=function(t,i){this._min=o.default(t,this._min),this._max=o.default(i,this._max)},s.prototype.setIncrement=function(t){this._increment=o.default(t,this._increment)},s.prototype.generate=function(){this._update();var t=this._p.sin(this._angle);return t=this._p.map(t,-1,1,this._min,this._max)},s.prototype._update=function(){this._angle+=this._increment}},{"../../utilities.js":19}],9:[function(t,i,e){function s(t,i){n.call(this,t,i,"../fonts/big_john-webfont.ttf")}i.exports=s;var o=t("p5-bbox-aligned-text"),n=t("./base-logo-sketch.js"),a=t("../utilities.js");s.prototype=Object.create(n.prototype),s.prototype._onResize=function(t){n.prototype._onResize.call(this,t),this._spacing=a.map(this._fontSize,20,40,2,5,{clamp:!0,round:!0}),this._bboxText.setText(this._text).setTextSize(this._fontSize).setAnchor(o.ALIGN.BOX_LEFT,o.BASELINE.ALPHABETIC).setPosition(this._textOffset.left,this._textOffset.top).setAnchor(o.ALIGN.BOX_CENTER,o.BASELINE.BOX_CENTER,!0),this._drawStationaryLogo(t),this._calculateCircles(t),this._isFirstFrame=!0},s.prototype._drawStationaryLogo=function(t){t.background(255),t.stroke(255),t.fill("#0A000A"),t.strokeWeight(2),this._bboxText.draw()},s.prototype._setup=function(t){n.prototype._setup.call(this,t),this._bboxText=new o(this._font,this._text,this._fontSize,0,0,t),this._onResize(t),this._drawStationaryLogo(t),this._calculateCircles(t)},s.prototype._calculateCircles=function(t){var i=this._bboxText.getBbox(),e=Math.floor(Math.max(i.x-5,0)),s=Math.ceil(Math.min(i.x+i.w+5,t.width)),o=Math.floor(Math.max(i.y-5,0)),n=Math.ceil(Math.min(i.y+i.h+5,t.height));t.loadPixels(),t.pixelDensity(1),this._circles=[];for(var a=o;a<n;a+=this._spacing)for(var h=e;h<s;h+=this._spacing){var r=4*(a*t.width+h),c=t.pixels[r],_=t.pixels[r+1],l=t.pixels[r+2],d=t.pixels[r+3],p=t.color(c,_,l,d);t.saturation(p)>0&&(this._circles.push({x:h+t.random(-2/3*this._spacing,2/3*this._spacing),y:a+t.random(-2/3*this._spacing,2/3*this._spacing),color:t.color("#06FFFF")}),this._circles.push({x:h+t.random(-2/3*this._spacing,2/3*this._spacing),y:a+t.random(-2/3*this._spacing,2/3*this._spacing),color:t.color("#FE00FE")}),this._circles.push({x:h+t.random(-2/3*this._spacing,2/3*this._spacing),y:a+t.random(-2/3*this._spacing,2/3*this._spacing),color:t.color("#FFFF04")}))}},s.prototype._draw=function(t){if(n.prototype._draw.call(this,t),this._isMouseOver&&this._isOverNavLogo){this._isFirstFrame&&(t.background(255),this._isFirstFrame=!1),t.blendMode(t.BLEND),t.background(255),t.noStroke(),t.blendMode(t.MULTIPLY);for(var i=this._bboxText.halfWidth,e=2*this._spacing,s=0;s<this._circles.length;s+=1){var o=this._circles[s],h=o.color,r=t.dist(o.x,o.y,t.mouseX,t.mouseY),c=a.map(r,0,i,1,e,{clamp:!0});t.fill(h),t.ellipse(o.x,o.y,c,c)}}}},{"../utilities.js":19,"./base-logo-sketch.js":5,"p5-bbox-aligned-text":2}],10:[function(t,i,e){function s(t,i){a.call(this,t,i,"../fonts/big_john-webfont.ttf")}i.exports=s;var o=t("./generators/noise-generators.js"),n=t("p5-bbox-aligned-text"),a=t("./base-logo-sketch.js");s.prototype=Object.create(a.prototype),s.prototype._onResize=function(t){a.prototype._onResize.call(this,t),this._bboxText.setText(this._text).setTextSize(this._fontSize).setRotation(0).setAnchor(n.ALIGN.BOX_LEFT,n.BASELINE.ALPHABETIC).setPosition(this._textOffset.left,this._textOffset.top).setAnchor(n.ALIGN.BOX_CENTER,n.BASELINE.BOX_CENTER,!0),this._textPos=this._bboxText.getPosition(),this._drawStationaryLogo(t),this._isFirstFrame=!0},s.prototype._drawStationaryLogo=function(t){t.background(255),t.stroke(255),t.fill("#0A000A"),t.strokeWeight(2),this._bboxText.draw()},s.prototype._setup=function(t){a.prototype._setup.call(this,t),this._bboxText=new n(this._font,this._text,this._fontSize,0,0,t),this._onResize(t),this._rotationNoise=new o.NoiseGenerator1D(t,-t.PI/4,t.PI/4,.02),this._xyNoise=new o.NoiseGenerator2D(t,-100,100,-50,50,.01,.01)},s.prototype._draw=function(t){if(a.prototype._draw.call(this,t),this._isMouseOver&&this._isOverNavLogo){this._isFirstFrame&&(t.background(255),this._isFirstFrame=!1);var i=this._rotationNoise.generate(),e=this._xyNoise.generate();this._bboxText.setRotation(i).setPosition(this._textPos.x+e.x,this._textPos.y+e.y).draw()}}},{"./base-logo-sketch.js":5,"./generators/noise-generators.js":7,"p5-bbox-aligned-text":2}],11:[function(t,i,e){function s(t){this._loader=t,this._$logo=$("nav.navbar .navbar-brand"),this._$nav=$("#main-nav"),this._$navLinks=this._$nav.find("a"),this._$activeNav=this._$navLinks.find(".active"),this._$navLinks.on("click",this._onNavClick.bind(this)),this._$logo.on("click",this._onLogoClick.bind(this))}i.exports=s,s.prototype.setActiveFromUrl=function(){this._deactivate();var t=location.pathname;"/index.html"===t||"/"===t?this._activateLink(this._$navLinks.filter("#about-link")):"/work.html"===t&&this._activateLink(this._$navLinks.filter("#work-link"))},s.prototype._deactivate=function(){this._$activeNav.length&&(this._$activeNav.removeClass("active"),this._$activeNav=$())},s.prototype._activateLink=function(t){t.addClass("active"),this._$activeNav=t},s.prototype._onLogoClick=function(t){t.preventDefault();var i=$(t.currentTarget).attr("href");this._loader.loadPage(i,{},!0)},s.prototype._onNavClick=function(t){t.preventDefault(),this._$nav.collapse("hide");var i=$(t.currentTarget);if(!i.is(this._$activeNav)){this._deactivate(),this._activateLink(i);var e=i.attr("href");this._loader.loadPage(e,{},!0)}}},{}],12:[function(t,i,e){function s(t){var i=t.state&&t.state.url||"/index.html",e=t.state&&t.state.query||{};if(i===l.getLoadedPath()&&"/work.html"===i){var s=e.category||"all";u.selectCategory(s)}else l.loadPage(i,{},!1)}function o(){new h,u=new r(l),c.init(),objectFitImages(),smartquotes(),d.setActiveFromUrl()}var n=t("./page-loader.js"),a=t("./main-nav.js"),h=t("./hover-slideshow.js"),r=t("./portfolio-filter.js"),c=t("./thumbnail-slideshow/slideshow.js"),_=t("./pick-random-sketch.js")(),l=new n(o),d=new a(l),p=$("nav.navbar");new _(p,p.find(".navbar-brand"));var u;o(),window.addEventListener("popstate",s)},{"./hover-slideshow.js":4,"./main-nav.js":11,"./page-loader.js":13,"./pick-random-sketch.js":14,"./portfolio-filter.js":15,"./thumbnail-slideshow/slideshow.js":17}],13:[function(t,i,e){function s(t,i){this._$content=$("#content"),this._onReload=t,this._fadeDuration=void 0!==i?i:250,this._path=location.pathname}i.exports=s;var o=t("./utilities.js");s.prototype.getLoadedPath=function(){return this._path},s.prototype.loadPage=function(t,i,e){function s(s,n){if("error"!==n){var a=o.createQueryString(i);e&&history.pushState({url:t,query:i},null,t+a),ga("set","page",t+a),ga("send","pageview"),this._path=location.pathname,this._$content.velocity({opacity:1},this._fadeDuration,"swing"),this._onReload()}else console.log("There was a problem loading the page.")}this._$content.velocity({opacity:0},this._fadeDuration,"swing",function(){this._$content.empty(),this._$content.load(t+" #content",s.bind(this))}.bind(this))}},{"./utilities.js":19}],14:[function(t,i,e){function s(t){var i=[];for(var e in a)-1===t.indexOf(e)&&i.push(e);return i}var o=t("js-cookie"),n=t("./utilities.js"),a={"halftone-flashlight":t("./interactive-logos/halftone-flashlight-word.js"),"noisy-word":t("./interactive-logos/noisy-word-sketch.js"),"connect-points":t("./interactive-logos/connect-points-sketch.js")},h=Object.keys(a).length;i.exports=function(){var t=o.getJSON("seen-sketch-names")||[],i=s(t);0===i.length&&(h>1?i=s(t=[t.pop()]):(t=[],i=Object.keys(a)));var e=n.randArrayElement(i);return t.push(e),o.set("seen-sketch-names",t,{expires:7}),a[e]}},{"./interactive-logos/connect-points-sketch.js":6,"./interactive-logos/halftone-flashlight-word.js":9,"./interactive-logos/noisy-word-sketch.js":10,"./utilities.js":19,"js-cookie":1}],15:[function(t,i,e){function s(t,i,e,s){this._loader=t,this._gridSpacing=0,this._aspectRatio=void 0!==e?e:16/9,this._transitionDuration=void 0!==s?s:800,this._breakpoints=void 0!==i?i.slice():n.slice(),this._$grid=$("#portfolio-grid"),this._$nav=$("#portfolio-nav"),this._$projects=[],this._$categories={},this._rows=0,this._cols=0,this._imageHeight=0,this._imageWidth=0,this._breakpoints.sort(function(t,i){return t.width<i.width?-1:t.width>i.width?1:0}),this._cacheProjects(),this._createGrid(),this._$grid.find(".project a").on("click",this._onProjectClick.bind(this));var a=(o.getQueryParameters().category||"all").toLowerCase();this._$activeNavItem=this._$nav.find("a[data-category="+a+"]"),this._$activeNavItem.addClass("active"),this._filterProjects(a),$("#portfolio-nav a").on("click",this._onNavClick.bind(this)),$(window).on("resize",this._createGrid.bind(this))}i.exports=s;var o=t("./utilities.js"),n=[{width:1200,cols:3,spacing:15},{width:992,cols:3,spacing:15},{width:700,cols:3,spacing:15},{width:600,cols:2,spacing:10},{width:480,cols:2,spacing:10},{width:320,cols:1,spacing:10}];s.prototype.selectCategory=function(t){t=t&&t.toLowerCase()||"all";var i=this._$nav.find("a[data-category="+t+"]");i.length&&!i.is(this._$activeNavItem)&&(this._$activeNavItem.removeClass("active"),this._$activeNavItem=i,this._$activeNavItem.addClass("active"),this._filterProjects(t))},s.prototype._filterProjects=function(t){var i=this._getProjectsInCategory(t);this._animateGridHeight(i.length),this._$projects.forEach(function(t){t.velocity("stop");var e=i.indexOf(t);if(-1===e)t.css("zIndex",-1),t.velocity({opacity:0},this._transitionDuration,"easeInOutCubic",function(){t.hide()});else{t.show(),t.css("zIndex",0);var s=this._indexToXY(e);t.velocity({opacity:1,top:s.y+"px",left:s.x+"px"},this._transitionDuration,"easeInOutCubic")}}.bind(this))},s.prototype._animateGridHeight=function(t){this._$grid.velocity("stop");var i=Math.ceil(t/this._cols);this._$grid.velocity({height:this._imageHeight*i+this._gridSpacing*(i-1)+"px"},this._transitionDuration)},s.prototype._getProjectsInCategory=function(t){return"all"===t?this._$projects:this._$categories[t]||[]},s.prototype._cacheProjects=function(){this._$projects=[],this._$categories={},this._$grid.find(".project").each(function(t,i){var e=$(i);this._$projects.push(e);for(var s=e.data("categories").split(","),o=0;o<s.length;o+=1){var n=$.trim(s[o]).toLowerCase();this._$categories[n]?this._$categories[n].push(e):this._$categories[n]=[e]}}.bind(this))},s.prototype._calculateGrid=function(){for(var t=this._$grid.innerWidth(),i=0;i<this._breakpoints.length;i+=1)if(t<=this._breakpoints[i].width){this._cols=this._breakpoints[i].cols,this._gridSpacing=this._breakpoints[i].spacing;break}this._rows=Math.ceil(this._$projects.length/this._cols),this._imageWidth=(t-(this._cols-1)*this._gridSpacing)/this._cols,this._imageHeight=this._imageWidth*(1/this._aspectRatio)},s.prototype._createGrid=function(){this._calculateGrid(),this._$grid.css("position","relative"),this._$grid.css({height:this._imageHeight*this._rows+this._gridSpacing*(this._rows-1)+"px"}),this._$projects.forEach(function(t,i){var e=this._indexToXY(i);t.css({position:"absolute",top:e.y+"px",left:e.x+"px",width:this._imageWidth+"px",height:this._imageHeight+"px"})}.bind(this))},s.prototype._onNavClick=function(t){t.preventDefault();var i=$(t.target);if(!i.is(this._$activeNavItem)){this._$activeNavItem.length&&this._$activeNavItem.removeClass("active"),i.addClass("active"),this._$activeNavItem=i;var e=i.data("category").toLowerCase();history.pushState({url:"/work.html",query:{category:e}},null,"/work.html?category="+e),this._filterProjects(e)}},s.prototype._onProjectClick=function(t){t.preventDefault();var i="/projects/"+$(t.currentTarget).data("name")+".html";this._loader.loadPage(i,{},!0)},s.prototype._indexToXY=function(t){var i=Math.floor(t/this._cols),e=t%this._cols;return{x:e*this._imageWidth+e*this._gridSpacing,y:i*this._imageHeight+i*this._gridSpacing}}},{"./utilities.js":19}],16:[function(t,i,e){function s(t,i){this._slideshow=i,this._$modal=t.find(".slideshow-modal"),this._$overlay=this._$modal.find(".modal-overlay"),this._$content=this._$modal.find(".modal-contents"),this._$caption=this._$modal.find(".modal-caption"),this._$imageContainer=this._$modal.find(".modal-image"),this._$imageLeft=this._$modal.find(".image-advance-left"),this._$imageRight=this._$modal.find(".image-advance-right"),this._index=0,this._isOpen=!1,this._$imageLeft.on("click",this.advanceLeft.bind(this)),this._$imageRight.on("click",this.advanceRight.bind(this)),$(document).on("keydown",this._onKeyDown.bind(this)),this._$modal.css("display","block"),this._$modal.hide(),$(window).on("resize",this._onResize.bind(this)),this._$overlay.on("click",this.close.bind(this)),this._$modal.find(".modal-close").on("click",this.close.bind(this)),this._updateControls(),setTimeout(function(){this._onResize()}.bind(this),0)}i.exports=s;var o={LEFT_ARROW:37,RIGHT_ARROW:39,ESCAPE:27};s.prototype.advanceLeft=function(){this.showImageAt(this._index-1)},s.prototype.advanceRight=function(){this.showImageAt(this._index+1)},s.prototype.showImageAt=function(t){t=Math.max(t,0),t=Math.min(t,this._slideshow.getNumImages()-1),this._index=t;var i=this._slideshow.getGalleryImage(this._index),e=this._slideshow.getCaption(this._index);this._$imageContainer.empty(),$("<img>",{src:i.attr("src")}).appendTo(this._$imageContainer),this._$caption.empty(),e&&($("<span>").addClass("figure-number").text("Fig. "+(this._index+1)+": ").appendTo(this._$caption),$("<span>").addClass("caption-text").text(e).appendTo(this._$caption)),this._onResize(),this._updateControls()},s.prototype.open=function(t){t=t||0,this._$modal.show(),this.showImageAt(t),this._isOpen=!0},s.prototype.close=function(){this._$modal.hide(),this._isOpen=!1},s.prototype._onKeyDown=function(t){this._isOpen&&(t.which===o.LEFT_ARROW?this.advanceLeft():t.which===o.RIGHT_ARROW?this.advanceRight():t.which===o.ESCAPE&&this.close())},s.prototype._updateControls=function(){this._$imageRight.removeClass("disabled"),this._$imageLeft.removeClass("disabled"),this._index>=this._slideshow.getNumImages()-1?this._$imageRight.addClass("disabled"):this._index<=0&&this._$imageLeft.addClass("disabled")},s.prototype._onResize=function(){var t=this._$imageContainer.find("img");this._$content.width("");var i=this._$imageLeft.outerWidth(!0)+this._$imageRight.outerWidth(!0),e=2*this._$caption.outerHeight(!0),s=this._$modal.width()-i,o=this._$modal.height()-e,n=function(){var i=t.prop("naturalWidth"),e=t.prop("naturalHeight"),n=i/s,a=e/o,h=Math.max(n,a);h>1?(t.css("width",i/h+"px"),t.css("height",e/h+"px")):(t.css("width",i+"px"),t.css("height",e+"px")),this._$imageRight.css("top",t.outerHeight()/2+"px"),this._$imageLeft.css("top",t.outerHeight()/2+"px"),this._$content.width(t.outerWidth(!0))}.bind(this);t.prop("complete")?n():t.one("load",n)}},{}],17:[function(t,i,e){function s(t,i){this._transitionDuration=i,this._$container=t,this._index=0,this._thumbnailSlider=new n(t,this),this._modal=new o(t,this),this._$captionContainer=t.find(".caption"),this._$selectedImageContainer=t.find(".selected-image"),this._$selectedImageContainer.on("click",function(){this._modal.open(this._index)}.bind(this)),this._$galleryImages=this._loadGalleryImages(),this._numImages=this._$galleryImages.length,this.showImage(0)}var o=t("./slideshow-modal.js"),n=t("./thumbnail-slider.js");i.exports={init:function(t){t=void 0!==t?t:400,this._slideshows=[],$(".slideshow").each(function(i,e){var o=new s($(e),t);this._slideshows.push(o)}.bind(this))}},s.prototype.getActiveIndex=function(){return this._index},s.prototype.getNumImages=function(){return this._numImages},s.prototype.getGalleryImage=function(t){return this._$galleryImages[t]},s.prototype.getCaption=function(t){return this._$galleryImages[t].data("caption")},s.prototype.showImage=function(t){this._$galleryImages.forEach(function(t){t.css({zIndex:0,opacity:0}),t.velocity("stop")},this);var i=this._$galleryImages[this._index],e=this._$galleryImages[t];this._index=t,i.css("zIndex",1),e.css("zIndex",2),i.css("opacity",1),e.velocity({opacity:1},this._transitionDuration,"easeInOutQuad");var s=e.data("caption");s&&(this._$captionContainer.empty(),$("<span>").addClass("figure-number").text("Fig. "+(this._index+1)+": ").appendTo(this._$captionContainer),$("<span>").addClass("caption-text").text(s).appendTo(this._$captionContainer))},s.prototype._loadGalleryImages=function(){for(var t=[],i=0;i<this._thumbnailSlider.getNumThumbnails();i+=1){var e=this._thumbnailSlider.get$Thumbnail(i),s=e.data("large-path"),o=s.split("/").pop().split(".")[0],n=$("<img>",{id:o}).css({position:"absolute",top:"0px",left:"0px",opacity:0,zIndex:0}).data("image-url",s).data("caption",e.data("caption")).appendTo(this._$selectedImageContainer);n.get(0).src=s,t.push(n)}return t}},{"./slideshow-modal.js":16,"./thumbnail-slider.js":18}],18:[function(t,i,e){function s(t,i){this._$container=t,this._slideshow=i,this._index=0,this._scrollIndex=0,this._$thumbnailContainer=t.find(".thumbnails"),this._$thumbnailImages=this._$thumbnailContainer.find("img"),this._$visibleThumbnailWrap=t.find(".visible-thumbnails"),this._$advanceLeft=t.find(".thumbnail-advance-left"),this._$advanceRight=t.find(".thumbnail-advance-right"),this._$thumbnails=[],this._$thumbnailImages.each(function(t,i){var e=$(i);e.data("index",t),this._$thumbnails.push(e)}.bind(this)),this._numImages=this._$thumbnails.length,this._$advanceLeft.on("click",this.advanceLeft.bind(this)),this._$advanceRight.on("click",this.advanceRight.bind(this)),this._$thumbnailImages.on("click",this._onClick.bind(this)),this._activateThumbnail(0),$(window).on("resize",this._onResize.bind(this)),setTimeout(function(){this._onResize()}.bind(this),0)}i.exports=s,s.prototype.getActiveIndex=function(){return this._index},s.prototype.getNumThumbnails=function(){return this._numImages},s.prototype.get$Thumbnail=function(t){return this._$thumbnails[t]},s.prototype.advanceLeft=function(){var t=this._scrollIndex-this._numVisible;t=Math.max(t,0),this._scrollToThumbnail(t)},s.prototype.advanceRight=function(){var t=this._scrollIndex+this._numVisible;t=Math.min(t,this._numImages-1),this._scrollToThumbnail(t)},s.prototype._resetSizing=function(){this._$thumbnailContainer.css({top:"",left:"",width:"",height:""}),this._$visibleThumbnailWrap.width(""),this._$visibleThumbnailWrap.height(""),this._$thumbnails.forEach(function(t){t.height(""),t.width(t.height())})},s.prototype._onResize=function(){this._resetSizing();var t=this._$thumbnails[0],i=t.outerHeight(!1),e=2*(t.outerWidth(!0)-i);this._$advanceRight.css("display","block"),this._$advanceLeft.css("display","block");var s=this._$advanceRight.outerWidth(!0)+this._$advanceLeft.outerWidth(!0),o=this._$visibleThumbnailWrap.outerWidth(!1),n=Math.floor((o-e)/(i+e));if(n<this._numImages){var a=(o-s+e)/(n=Math.round((o-s+e)/(i+e)))-e;this._$thumbnails.forEach(function(t){t.css("width",a+"px"),t.css("height",a+"px")});var h=a*this._numImages+e*(this._numImages-1);this._$thumbnailContainer.css({width:h+"px",height:t.outerHeight(!0)+"px"}),this._$visibleThumbnailWrap.css({width:o-s+"px",height:t.outerHeight(!0)+"px"})}else n=this._numImages,this._$thumbnailContainer.css("width","100%"),this._$advanceRight.css("display","none"),this._$advanceLeft.css("display","none");this._numVisible=n;var r=Math.floor((this._numVisible-1)/2);this._scrollBounds={min:r,max:this._numImages-1-r},this._numVisible%2==0&&(this._scrollBounds.max-=1),this._updateThumbnailControls()},s.prototype._activateThumbnail=function(t){this._$thumbnails[this._index].removeClass("active"),this._$thumbnails[t].addClass("active")},s.prototype._scrollToThumbnail=function(t){if(this._numVisible!==this._numImages){t=Math.max(t,this._scrollBounds.min),t=Math.min(t,this._scrollBounds.max),this._scrollIndex=t;var i=this._$thumbnails[0],e=parseFloat(i.css("width")),s=2*parseFloat(i.css("margin-right")),o=e*this._scrollBounds.min+s*(this._scrollBounds.min-1)-(e*t+s*(t-1));this._$thumbnailContainer.velocity("stop"),this._$thumbnailContainer.velocity({left:o+"px"},600,"easeInOutQuad"),this._updateThumbnailControls()}},s.prototype._onClick=function(t){var i=$(t.target).data("index");this._index!==i&&(this._activateThumbnail(i),this._scrollToThumbnail(i),this._index=i,this._slideshow.showImage(i))},s.prototype._updateThumbnailControls=function(){this._$advanceLeft.removeClass("disabled"),this._$advanceRight.removeClass("disabled"),this._scrollIndex>=this._scrollBounds.max?this._$advanceRight.addClass("disabled"):this._scrollIndex<=this._scrollBounds.min&&this._$advanceLeft.addClass("disabled")}},{}],19:[function(t,i,e){e.default=function(t,i){return void 0!==t?t:i},e.timeIt=function(t){var i=performance.now();return t(),performance.now()-i},e.isInRect=function(t,i,e){return t>=e.x&&t<=e.x+e.w&&i>=e.y&&i<=e.y+e.h},e.randInt=function(t,i){return Math.floor(Math.random()*(i-t+1))+t},e.randArrayElement=function(t){return t[e.randInt(0,t.length-1)]},e.map=function(t,i,e,s,o,n){var a=(t-i)/(e-i)*(o-s)+s;return n?(n.round&&!0===n.round&&(a=Math.round(a)),n.floor&&!0===n.floor&&(a=Math.floor(a)),n.ceil&&!0===n.ceil&&(a=Math.ceil(a)),n.clamp&&!0===n.clamp&&(a=Math.min(a,o),a=Math.max(a,s)),a):a},e.getQueryParameters=function(){var t=window.location.search;if(t.length<=1)return{};for(var i=(t=t.substring(1)).split("&"),e={},s=0;s<i.length;s+=1){var o=i[s].split("=");if(2===o.length){var n=decodeURIComponent(o[0]),a=decodeURIComponent(o[1]);e[n]=a}}return e},e.createQueryString=function(t){if("object"!=typeof t)return"";var i=Object.keys(t);if(0===i.length)return"";for(var e="?",s=0;s<i.length;s+=1){var o=i[s],n=t[o];e+=encodeURIComponent(o)+"="+encodeURIComponent(n),s!==i.length-1&&(e+="&")}return e},e.wrapIndex=function(t,i){var e=t%i;return e<0&&(e=i+e),e}},{}]},{},[12]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
